--- ../src-base/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
+++ ../src-work/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
@@ -27,15 +27,25 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import carpet.CarpetSettings;
+import carpet.carpetclient.CarpetClientChunkLogger;
+import carpet.utils.TickingArea;
+import carpet.utils.UnloadOrder;
+import net.minecraft.entity.Entity;
+import net.minecraft.server.management.PlayerChunkMapEntry;
+
 public class ChunkProviderServer implements IChunkProvider
 {
     private static final Logger field_147417_b = LogManager.getLogger();
-    private final Set<Long> field_73248_b = Sets.<Long>newHashSet();
-    private final IChunkGenerator field_186029_c;
-    private final IChunkLoader field_73247_e;
-    private final Long2ObjectMap<Chunk> field_73244_f = new Long2ObjectOpenHashMap<Chunk>(8192);
+    public final Set<Long> field_73248_b = Sets.<Long>newHashSet();
+    public final IChunkGenerator field_186029_c;
+    public final IChunkLoader field_73247_e; // CM changed to public for ticking areas
+    public final Long2ObjectMap<Chunk> field_73244_f = new Long2ObjectOpenHashMap<Chunk>(8192); // CM changed to public for commandUnload
     private final WorldServer field_73251_h;
 
+    // CM: simulatePermaloader
+    public boolean fakePermaloaderProtected = false;
+
     public ChunkProviderServer(WorldServer p_i46838_1_, IChunkLoader p_i46838_2_, IChunkGenerator p_i46838_3_)
     {
         this.field_73251_h = p_i46838_1_;
@@ -50,8 +60,18 @@
 
     public void func_189549_a(Chunk p_189549_1_)
     {
-        if (this.field_73251_h.field_73011_w.func_186056_c(p_189549_1_.field_76635_g, p_189549_1_.field_76647_h))
+        boolean canDrop = field_73251_h.field_73011_w.func_186056_c(p_189549_1_.field_76635_g, p_189549_1_.field_76647_h);
+        if (CarpetSettings.disableSpawnChunks)
+            canDrop = true;
+        if (CarpetSettings.tickingAreas)
+            canDrop &= !TickingArea.isTickingChunk(field_73251_h, p_189549_1_.field_76635_g, p_189549_1_.field_76647_h);
+        if (canDrop)
         {
+        	// ChunkLogger - 0x-CARPET
+            if(CarpetClientChunkLogger.logger.enabled) {
+            	CarpetClientChunkLogger.logger.log(this.field_73251_h,p_189549_1_.field_76635_g,p_189549_1_.field_76647_h,CarpetClientChunkLogger.Event.QUEUE_UNLOAD);
+            }
+        	
             this.field_73248_b.add(Long.valueOf(ChunkPos.func_77272_a(p_189549_1_.field_76635_g, p_189549_1_.field_76647_h)));
             p_189549_1_.field_189550_d = true;
         }
@@ -59,6 +79,7 @@
 
     public void func_73240_a()
     {
+        if (CarpetSettings.simulatePermaloader) this.fakePermaloaderProtected = true;
         ObjectIterator objectiterator = this.field_73244_f.values().iterator();
 
         while (objectiterator.hasNext())
@@ -76,6 +97,11 @@
 
         if (chunk != null)
         {
+        	// ChunkLogger - 0x-CARPET
+        	if(CarpetClientChunkLogger.logger.enabled && chunk.field_189550_d) {
+        		CarpetClientChunkLogger.logger.log(this.field_73251_h,p_186026_1_,p_186026_2_,CarpetClientChunkLogger.Event.CANCEL_UNLOAD);
+        	}
+        	
             chunk.field_189550_d = false;
         }
 
@@ -93,9 +119,17 @@
 
             if (chunk != null)
             {
+            	// ChunkLogger - 0x-CARPET
+                if(CarpetClientChunkLogger.logger.enabled) {
+                	CarpetClientChunkLogger.logger.log(this.field_73251_h,p_186028_1_,p_186028_2_,CarpetClientChunkLogger.Event.LOADING);
+                }
+            	
                 this.field_73244_f.put(ChunkPos.func_77272_a(p_186028_1_, p_186028_2_), chunk);
                 chunk.func_76631_c();
+                if(carpet.carpetclient.CarpetClientChunkLogger.logger.enabled)
+                    carpet.carpetclient.CarpetClientChunkLogger.setReason("Population triggering neighbouring chunks to cancel unload");
                 chunk.func_186030_a(this, this.field_186029_c);
+                carpet.carpetclient.CarpetClientChunkLogger.resetToOldReason();
             }
         }
 
@@ -113,6 +147,11 @@
             try
             {
                 chunk = this.field_186029_c.func_185932_a(p_186025_1_, p_186025_2_);
+                
+            	// ChunkLogger - 0x-CARPET
+                if(CarpetClientChunkLogger.logger.enabled) {
+                	CarpetClientChunkLogger.logger.log(this.field_73251_h,p_186025_1_,p_186025_2_,CarpetClientChunkLogger.Event.GENERATING);
+                }
             }
             catch (Throwable throwable)
             {
@@ -123,7 +162,7 @@
                 crashreportcategory.func_71507_a("Generator", this.field_186029_c);
                 throw new ReportedException(crashreport);
             }
-
+            
             this.field_73244_f.put(i, chunk);
             chunk.func_76631_c();
             chunk.func_186030_a(this, this.field_186029_c);
@@ -185,6 +224,8 @@
 
     public boolean func_186027_a(boolean p_186027_1_)
     {
+        // NewLight PHIPRO-CARPET
+        if (CarpetSettings.newLight) this.field_73251_h.lightingEngine.procLightUpdates();
         int i = 0;
         List<Chunk> list = Lists.newArrayList(this.field_73244_f.values());
 
@@ -222,8 +263,12 @@
     {
         if (!this.field_73251_h.field_73058_d)
         {
-            if (!this.field_73248_b.isEmpty())
+            if (!this.field_73248_b.isEmpty() && !this.fakePermaloaderProtected)
             {
+                if(carpet.carpetclient.CarpetClientChunkLogger.logger.enabled)
+                    carpet.carpetclient.CarpetClientChunkLogger.setReason("Unloading chunk and writing to disk");
+                // NewLight PHIPRO-CARPET
+                if (CarpetSettings.newLight) this.field_73251_h.lightingEngine.procLightUpdates();
                 Iterator<Long> iterator = this.field_73248_b.iterator();
 
                 for (int i = 0; i < 100 && iterator.hasNext(); iterator.remove())
@@ -231,16 +276,47 @@
                     Long olong = iterator.next();
                     Chunk chunk = (Chunk)this.field_73244_f.get(olong);
 
-                    if (chunk != null && chunk.field_189550_d)
+                    if (chunk != null /*&& chunk.unloadQueued*/) // CM: moved check below
                     {
+                        if (chunk.field_189550_d) {
                         chunk.func_76623_d();
                         this.func_73242_b(chunk);
                         this.func_73243_a(chunk);
                         this.field_73244_f.remove(olong);
                         ++i;
+
+                    	// ChunkLogger - 0x-CARPET
+                        if(CarpetClientChunkLogger.logger.enabled) {
+                            CarpetClientChunkLogger.logger.log(this.field_73251_h,chunk.field_76635_g,chunk.field_76647_h,CarpetClientChunkLogger.Event.UNLOADING);
+                        }
+                        } else if (CarpetSettings.whereToChunkSavestate.canUnloadNearPlayers) {
+                            //noinspection ConstantConditions
+                            if (CarpetSettings.whereToChunkSavestate == CarpetSettings.WhereToChunkSavestate.everywhere
+                                    || field_73251_h.func_175661_b(Entity.class, player -> player.field_70176_ah == chunk.field_76635_g && player.field_70164_aj == chunk.field_76647_h).isEmpty()) {
+                                // Getting the chunk size is incredibly inefficient, but it's better than unloading and reloading the chunk
+                                if ((UnloadOrder.getSavedChunkSize(chunk) + 5) / 4096 + 1 >= 256) {
+                                    chunk.func_76623_d();
+                                    //this.saveChunkData(chunk); no point saving the chunk data, we know that won't work
+                                    this.func_73243_a(chunk);
+                                    this.field_73244_f.remove(olong);
+                                    //++i; don't break stuff
+                                    Chunk newChunk = this.func_186028_c(chunk.field_76635_g, chunk.field_76647_h);
+                                    if (newChunk != null)
+                                        newChunk.func_150804_b(true);
+                                    PlayerChunkMapEntry pcmEntry = field_73251_h.field_73063_M.func_187301_b(chunk.field_76635_g, chunk.field_76647_h);
+                                    if (pcmEntry != null) {
+                                        pcmEntry.field_187286_f = newChunk;
+                                        pcmEntry.field_187290_j = false;
+                                        pcmEntry.func_187272_b();
+                                    }
+                                }
+                            }
+                        }
                     }
                 }
+                carpet.carpetclient.CarpetClientChunkLogger.resetReason();
             }
+            this.fakePermaloaderProtected = false;
 
             this.field_73247_e.func_75817_a();
         }
@@ -283,6 +359,11 @@
     {
         return this.field_73244_f.containsKey(ChunkPos.func_77272_a(p_73149_1_, p_73149_2_));
     }
+    
+    public boolean isChunkUnloadScheduled(int x, int z) {
+    	long chunk = ChunkPos.func_77272_a(x, z);
+    	return this.field_73248_b.contains(chunk);
+    }
 
     public boolean func_191062_e(int p_191062_1_, int p_191062_2_)
     {
