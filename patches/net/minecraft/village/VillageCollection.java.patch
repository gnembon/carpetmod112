--- ../src-base/minecraft/net/minecraft/village/VillageCollection.java
+++ ../src-work/minecraft/net/minecraft/village/VillageCollection.java
@@ -1,9 +1,20 @@
 package net.minecraft.village;
 
+import carpet.CarpetSettings;
+import carpet.carpetclient.CarpetClientChunkLogger;
+import carpet.helpers.GolemCounter;
+import carpet.helpers.IronFarmOptimization;
+import carpet.logging.LoggerRegistry;
+import carpet.utils.Messenger;
+import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.Lists;
+
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import javax.annotation.Nullable;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockDoor;
 import net.minecraft.block.material.Material;
@@ -11,11 +22,16 @@
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.util.EnumFacing;
+import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.math.ChunkPos;
+import net.minecraft.util.text.ITextComponent;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.storage.WorldSavedData;
 
+import carpet.carpetclient.CarpetClientMarkers;
+
 public class VillageCollection extends WorldSavedData
 {
     private World field_75556_a;
@@ -23,6 +39,17 @@
     private final List<VillageDoorInfo> field_75555_c = Lists.<VillageDoorInfo>newArrayList();
     private final List<Village> field_75552_d = Lists.<Village>newArrayList();
     private int field_75553_e;
+    // Added update markers to update the client when a new door or village is added to the village list CARPET-XCOM
+    public static boolean updateMarkers;
+    // Stores the door blockPos and its village to find it quicker for doorSearchOptimization
+    private final ArrayListMultimap<BlockPos, Village> doorCache = ArrayListMultimap.create();
+    // Tracks chunks with active doors to chunk load for doorCheckOptimization
+    private final Map<ChunkPos, Integer> villageChunks = new HashMap<>();
+    // Saves AABB checks to reuse for ironFarmAABBOptimization
+    private final Map<AxisAlignedBB, Integer> villagerCache = new HashMap<>();
+    private final Map<AxisAlignedBB, Integer> golemCache = new HashMap<>();
+    // Stores old list for undo
+    public List<Village> oldVillageList = Lists.newArrayList();
 
     public VillageCollection(String p_i1677_1_)
     {
@@ -48,7 +75,8 @@
 
     public void func_176060_a(BlockPos p_176060_1_)
     {
-        if (this.field_75554_b.size() <= 64)
+        // CM
+        if (this.field_75554_b.size() <= CarpetSettings.villagerQueueLength)
         {
             if (!this.func_176057_e(p_176060_1_))
             {
@@ -61,14 +89,40 @@
     {
         ++this.field_75553_e;
 
+        if (CarpetSettings.doorCheckOptimization) // simulate village loading
+        {
+            CarpetClientChunkLogger.setReason("Village loading");
+            for (ChunkPos chunkPos : this.villageChunks.keySet())
+            {
+                this.field_75556_a.func_72964_e(chunkPos.field_77276_a, chunkPos.field_77275_b);
+            }
+            CarpetClientChunkLogger.resetToOldReason();
+        }
+        //CM
+        this.villagerCache.clear();
+        this.golemCache.clear();
+        Village.cap = 0;
+
         for (Village village : this.field_75552_d)
         {
             village.func_75560_a(this.field_75553_e);
         }
 
+        //CM
+        if (CarpetSettings.golemCounter && !this.field_75552_d.isEmpty())
+        {
+            GolemCounter.counter.add(field_75556_a.func_73046_m(), Village.cap);
+        }
+
         this.func_75549_c();
         this.func_75543_d();
         this.func_75545_e();
+        //Update villager markers on carpet client CARPET-XCOM
+        if (updateMarkers)
+        {
+            CarpetClientMarkers.updateClientVillageMarkers(field_75556_a);
+            updateMarkers = false;
+        }
 
         if (this.field_75553_e % 400 == 0)
         {
@@ -86,8 +140,10 @@
 
             if (village.func_75566_g())
             {
+                CarpetClientMarkers.annihilatedVillages.add(village);
                 iterator.remove();
                 this.func_76185_a();
+                updateMarkers = true;
             }
         }
     }
@@ -123,6 +179,20 @@
 
     private void func_75543_d()
     {
+        //CM
+        if (LoggerRegistry.__villagerQueue && this.func_75540_b().size() != 0)
+        {
+            LoggerRegistry.getLogger("villagerQueue").log(option -> new ITextComponent[]{
+                    Messenger.m(null, String.format("w Queue Length: %d", this.field_75554_b.size()))
+            });
+        }
+        if (CarpetSettings.disableVillagerQueue)
+        {
+            while (!this.field_75554_b.isEmpty()) {
+                this.func_180609_b(this.field_75554_b.remove(0));
+            }
+        }
+
         if (!this.field_75554_b.isEmpty())
         {
             this.func_180609_b(this.field_75554_b.remove(0));
@@ -192,6 +262,11 @@
             }
         }
 
+        if (CarpetSettings.doorSearchOptimization)
+        {
+            return IronFarmOptimization.findDoorInfo(this, p_176055_1_);
+        }
+
         for (Village village : this.field_75552_d)
         {
             VillageDoorInfo villagedoorinfo1 = village.func_179864_e(p_176055_1_);
@@ -266,6 +341,11 @@
         }
     }
 
+    //CM
+    public int getTickCounter() {
+        return this.field_75553_e;
+    }
+
     public void func_76184_a(NBTTagCompound p_76184_1_)
     {
         this.field_75553_e = p_76184_1_.func_74762_e("Tick");
@@ -277,7 +357,22 @@
             Village village = new Village();
             village.func_82690_a(nbttagcompound);
             this.field_75552_d.add(village);
+            if (CarpetSettings.doorSearchOptimization)
+            {
+                for (VillageDoorInfo doorInfo : village.func_75558_f())
+                {
+                    IronFarmOptimization.addDoor(this, village, doorInfo.func_179852_d());
+                }
+            }
+            if (CarpetSettings.doorCheckOptimization)
+            {
+                for (VillageDoorInfo doorInfo : village.func_75558_f())
+                {
+                    IronFarmOptimization.addChunk(this.getVillageChunks(), doorInfo.func_179852_d());
+                }
+            }
         }
+        updateMarkers = true;
     }
 
     public NBTTagCompound func_189551_b(NBTTagCompound p_189551_1_)
@@ -300,4 +395,24 @@
     {
         return "villages" + p_176062_0_.func_186058_p().func_186067_c();
     }
+
+    public ArrayListMultimap<BlockPos, Village> getDoorCache()
+    {
+        return this.doorCache;
+    }
+
+    public Map<ChunkPos, Integer> getVillageChunks()
+    {
+        return this.villageChunks;
+    }
+
+    public Map<AxisAlignedBB, Integer> getVillagerCache()
+    {
+        return this.villagerCache;
+    }
+
+    public Map<AxisAlignedBB, Integer> getGolemCache()
+    {
+        return this.golemCache;
+    }
 }
