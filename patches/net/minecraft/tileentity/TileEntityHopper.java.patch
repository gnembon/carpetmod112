--- ../src-base/minecraft/net/minecraft/tileentity/TileEntityHopper.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntityHopper.java
@@ -2,6 +2,10 @@
 
 import java.util.List;
 import javax.annotation.Nullable;
+
+import carpet.carpetclient.CarpetClientChunkLogger;
+import carpet.helpers.lifetime.removal.LiteralRemovalReason;
+import carpet.helpers.TileEntityCraftingTable;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.block.BlockHopper;
@@ -28,12 +32,21 @@
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.World;
 
-public class TileEntityHopper extends TileEntityLockableLoot implements IHopper, ITickable
+import net.minecraft.item.EnumDyeColor;
+import carpet.helpers.TileEntityOptimizer.ILazyTileEntity;
+import carpet.CarpetSettings;
+import carpet.helpers.HopperCounter;
+import carpet.utils.WoolTool;
+
+public class TileEntityHopper extends TileEntityLockableLoot implements IHopper, ITickable, ILazyTileEntity
 {
     private NonNullList<ItemStack> field_145900_a = NonNullList.<ItemStack>func_191197_a(5, ItemStack.field_190927_a);
     private int field_145901_j = -1;
     private long field_190578_g;
 
+        //CM
+    public String cm_name() { return "Hopper"; }
+
     public static void func_189683_a(DataFixer p_189683_0_)
     {
         p_189683_0_.func_188258_a(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityHopper.class, new String[] {"Items"}));
@@ -132,14 +145,44 @@
             {
                 boolean flag = false;
 
-                if (!this.func_152104_k())
+                if(!CarpetSettings.optimizedTileEntities)
                 {
-                    flag = this.func_145883_k();
-                }
+                    if (!this.func_152104_k())
+                    {
+                        flag = this.func_145883_k();
+                    }
 
-                if (!this.func_152105_l())
+                    if (!this.func_152105_l())
+                    {
+                        flag = func_145891_a(this) || flag;
+                    }
+                }
+                else
                 {
-                    flag = func_145891_a(this) || flag;
+                    // CARPET-optimizedTileEntities: if push is sleeping, skip the pushing sequence
+                    if(!this.pushSleeping)
+                    {
+                        if (!this.func_152104_k())
+                        {
+                            flag = this.func_145883_k();
+                        }
+                        else
+                        {
+                            this.pushSleeping = true; // push falls asleep if the hopper is empty
+                        }
+                    }
+                    // CARPET-optimizedTileEntities: if pull is sleeping, skip the pulling sequence
+                    if (!this.pullSleeping)
+                    {
+                        if(!this.func_152105_l())
+                        {
+                            flag = func_145891_a(this) || flag;
+                        }
+                        else
+                        {
+                            this.pullSleeping = true;	// pull falls asleep if the hopper is full
+                        }
+                    }
                 }
 
                 if (flag)
@@ -191,10 +234,42 @@
 
     private boolean func_145883_k()
     {
+        String prevReason = CarpetClientChunkLogger.reason;
+        CarpetClientChunkLogger.reason = "Hopper loading";
+        /* carpet mod */
+        if (CarpetSettings.hopperCounters != CarpetSettings.HopperCounters.off)
+        {
+            String counter;
+            if (CarpetSettings.hopperCounters == CarpetSettings.HopperCounters.all){
+                counter = "all";
+            } else {
+                EnumDyeColor woolColor = this.get_wool_pointing();
+                counter = woolColor != null ? woolColor.func_176610_l() : null;
+            }
+
+            if (counter != null)
+            {
+                for (int i = 0; i < this.func_70302_i_(); ++i)
+                {
+                    if (!this.func_70301_a(i).func_190926_b())
+                    {
+                        ItemStack itemstack = this.func_70301_a(i);//.copy();
+                        HopperCounter.COUNTERS.get(counter).add(this.func_145831_w().func_73046_m(), itemstack);
+                        this.func_70299_a(i, ItemStack.field_190927_a);
+                    }
+                }
+                return true;
+            }
+        }
+        /* end */
+
         IInventory iinventory = this.func_145895_l();
 
+        CarpetClientChunkLogger.reason = prevReason;
+
         if (iinventory == null)
         {
+            // Carpet-optimizedTileEntities: This code purposely does not put push to sleep to preserve chunk loading behavior
             return false;
         }
         else
@@ -203,6 +278,10 @@
 
             if (this.func_174919_a(iinventory, enumfacing))
             {
+                // Carpet-optimizedTileEntities: Push falls asleep if the container it would push into is full and
+                // is an actual tile entity (not a minecart). This is because minecarts do not cause comparator updates and would keep the
+                // hopper in a sleeping push state when leaving or emptying
+                this.pushSleeping = iinventory instanceof TileEntityLockable;
                 return false;
             }
             else
@@ -297,7 +376,10 @@
 
     public static boolean func_145891_a(IHopper p_145891_0_)
     {
+        String prevReason = CarpetClientChunkLogger.reason;
+        CarpetClientChunkLogger.reason = "Hopper self-loading";
         IInventory iinventory = func_145884_b(p_145891_0_);
+        CarpetClientChunkLogger.reason = prevReason;
 
         if (iinventory != null)
         {
@@ -305,6 +387,14 @@
 
             if (func_174917_b(iinventory, enumfacing))
             {
+                // Carpet-optimizedTileEntities: Pull falls asleep if the container it would pull from is empty and
+                // is an actual tile entity (not a minecart). This is because minecarts do not cause comparator updates and would keep the
+                // hopper in a sleeping pull state when leaving or filling up
+                if(iinventory instanceof TileEntityLockable && p_145891_0_ instanceof TileEntityHopper)
+                {
+                    ((TileEntityHopper)p_145891_0_).pullSleeping = true;
+                }
+
                 return false;
             }
 
@@ -333,6 +423,13 @@
                     }
                 }
             }
+
+            // Carpet-optimizedTileEntities: There is a non-empty inventory above the hopper, but for some reason the hopper cannot suck
+            // items from it. Therefore the hopper pulling should sleep (if the inventory is not a minecart).
+            if(iinventory instanceof TileEntityLockable && p_145891_0_ instanceof TileEntityHopper)
+            {
+                ((TileEntityHopper)p_145891_0_).pullSleeping = true;
+            }
         }
         else
         {
@@ -352,6 +449,11 @@
     {
         ItemStack itemstack = p_174915_1_.func_70301_a(p_174915_2_);
 
+        // Added method to fix auto crafting sucking out items to early CAPRET-XCOM
+        if(CarpetSettings.autocrafter && TileEntityCraftingTable.checkIfCanCraft(p_174915_0_, p_174915_1_, itemstack)){
+            return false;
+        }
+
         if (!itemstack.func_190926_b() && func_174921_b(p_174915_1_, itemstack, p_174915_2_, p_174915_3_))
         {
             ItemStack itemstack1 = itemstack.func_77946_l();
@@ -384,6 +486,7 @@
 
             if (itemstack1.func_190926_b())
             {
+                p_145898_2_.recordRemoval(LiteralRemovalReason.HOPPER);  // CM lifetime tracker
                 flag = true;
                 p_145898_2_.func_70106_y();
             }
@@ -499,6 +602,14 @@
         return func_145893_b(this.func_145831_w(), this.func_96107_aA() + (double)enumfacing.func_82601_c(), this.func_96109_aB() + (double)enumfacing.func_96559_d(), this.func_96108_aC() + (double)enumfacing.func_82599_e());
     }
 
+    /* carpet mod */
+    private EnumDyeColor get_wool_pointing()
+    {
+        return WoolTool.getWoolColorAtPosition(
+                func_145831_w(),
+                new BlockPos(func_96107_aA(),func_96109_aB(),func_96108_aC() ).func_177972_a(BlockHopper.func_176428_b(this.func_145832_p())));
+    }
+
     public static IInventory func_145884_b(IHopper p_145884_0_)
     {
         return func_145893_b(p_145884_0_.func_145831_w(), p_145884_0_.func_96107_aA(), p_145884_0_.func_96109_aB() + 1.0D, p_145884_0_.func_96108_aC());
@@ -546,7 +657,7 @@
         return iinventory;
     }
 
-    private static boolean func_145894_a(ItemStack p_145894_0_, ItemStack p_145894_1_)
+    public static boolean func_145894_a(ItemStack p_145894_0_, ItemStack p_145894_1_)
     {
         if (p_145894_0_.func_77973_b() != p_145894_1_.func_77973_b())
         {
@@ -611,4 +722,15 @@
     {
         return this.field_145900_a;
     }
+
+    // CARPET-optimizedTileEntities: Whether the tile entity is asleep or not. Hoppers have 2 different actions that can sleep: pushing and pulling.
+    // False by default so tile entities wake up upon chunk loading
+    private boolean pullSleeping = false, pushSleeping = false;
+
+    // CARPET-optimizedTileEntities
+    @Override
+    public void wakeUp(){
+        this.pullSleeping = false;
+        this.pushSleeping = false;
+    }
 }
